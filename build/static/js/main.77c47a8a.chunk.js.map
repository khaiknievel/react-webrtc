{"version":3,"sources":["helpers/simple-peer.js","helpers/media-access.js","components/ShareScreenIcon.js","components/video.js","components/goToRoomInput.js","App.js","registerServiceWorker.js","index.js"],"names":["VideoCall","peer","init","stream","initiator","_this","Peer","trickle","reconnectTimer","iceTransportPolicy","config","iceServers","urls","process","split","username","credential","connect","otherId","signal","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","navigator","mediaDevices","getDisplayMedia","stop","ShareScreenIcon","react_default","createElement","xmlns","width","height","viewBox","fill","d","Video","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","videoCall","enter","roomId","setState","connecting","state","localStream","on","data","room","desc","socket","emit","remoteVideo","srcObject","waiting","err","console","log","renderFull","full","remoteStreamUrl","streamUrl","io","component","props","match","params","getUserMedia","then","type","cb","_this2","Promise","resolve","reject","webkitGetUserMedia","mozGetUserMedia","video","min","ideal","max","audio","localVideo","_this3","_getDisplayStream","apply","arguments","getDisplayStream","oninactive","removeStream","addStream","_this4","className","autoPlay","id","muted","ref","concat","onClick","getDisplay","components_ShareScreenIcon","React","Component","goToRoom","history","push","goToRoomInput","_ref","_useState","useState","shortId","generate","_useState2","slicedToArray","setRoomId","value","placeholder","onChange","event","target","App","BrowserRouter","Fragment","Route","path","exact","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.77c47a8a.chunk.js","sourcesContent":["import Peer from 'simple-peer'\n\nexport default class VideoCall {\n    peer = null \n    init = (stream, initiator) => {\n        this.peer = new Peer({\n            initiator: initiator,\n            stream: stream,\n            trickle: false,\n            reconnectTimer: 1000,\n            iceTransportPolicy: 'relay',\n            config: {\n                iceServers: [\n                    { urls: process.env.REACT_APP_STUN_SERVERS.split(',') },\n                    {\n                        urls: process.env.REACT_APP_TURN_SERVERS.split(','),\n                        username: process.env.REACT_APP_TURN_USERNAME,\n                        credential: process.env.REACT_APP_TURN_CREDENCIAL\n                    },\n                ]\n            }\n        })\n        return this.peer\n    }\n    connect = (otherId) => {\n        this.peer.signal(otherId)\n    }  \n} ","export async function getDisplayStream(){\n    return navigator.mediaDevices.getDisplayMedia();\n}","import React from 'react'\nconst ShareScreenIcon = () => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path fill=\"greenyellow\" d=\"M20 18c1.1 0 1.99-.9 1.99-2L22 6c0-1.11-.9-2-2-2H4c-1.11 0-2 .89-2 2v10c0 1.1.89 2 2 2H0v2h24v-2h-4zm-7-3.53v-2.19c-2.78 0-4.61.85-6 2.72.56-2.67 2.11-5.33 6-5.87V7l4 3.73-4 3.74z\"/></svg>\n)\n\nexport default ShareScreenIcon","import React from 'react'\nimport VideoCall from '../helpers/simple-peer'\nimport '../styles/video.css'\nimport io from 'socket.io-client'\nimport { getDisplayStream } from '../helpers/media-access';\nimport ShareScreenIcon from './ShareScreenIcon';\n\nclass Video extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      localStream: {},\n      remoteStreamUrl: '',\n      streamUrl: '',\n      initiator: false,\n      peer: {},\n      full: false,\n      connecting: false,\n      waiting: true\n    }\n  }\n  videoCall = new VideoCall()\n  componentDidMount() {\n    const socket = io(process.env.REACT_APP_SIGNALING_SERVER)\n    const component = this\n    this.setState({ socket })\n    const { roomId } = this.props.match.params\n    this.getUserMedia().then(() => {\n      socket.emit('join', { roomId: roomId })\n    })\n    socket.on('init', () => {\n      component.setState({ initiator: true })\n    })\n    socket.on('ready', () => {\n      component.enter(roomId)\n    })\n    socket.on('desc', data => {\n      if (data.type === 'offer' && component.state.initiator) return\n      if (data.type === 'answer' && !component.state.initiator) return\n      component.call(data)\n    })\n    socket.on('disconnected', () => {\n      component.setState({ initiator: true })\n    })\n    socket.on('full', () => {\n      component.setState({ full: true })\n    })\n  }\n  getUserMedia(cb) {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia =\n        navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia\n      const op = {\n        video: {\n          width: { min: 160, ideal: 640, max: 1280 },\n          height: { min: 120, ideal: 360, max: 720 }\n        },\n        audio: true\n      }\n      navigator.getUserMedia(\n        op,\n        stream => {\n          this.setState({ streamUrl: stream, localStream: stream })\n          this.localVideo.srcObject = stream\n          resolve()\n        },\n        () => {}\n      )\n    })\n  }\n  getDisplay(){\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream)\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream)\n        })\n      }\n      this.setState({ streamUrl: stream, localStream: stream })\n      this.localVideo.srcObject = stream\n      this.state.peer.addStream(stream)\n    })\n  }\n  enter = roomId => {\n    this.setState({ connecting: true })\n    const peer = this.videoCall.init(\n      this.state.localStream,\n      this.state.initiator\n    )\n    this.setState({peer})\n\n    peer.on('signal', data => {\n      const signal = {\n        room: roomId,\n        desc: data\n      }\n      this.state.socket.emit('signal', signal)\n    })\n    peer.on('stream', stream => {\n      this.remoteVideo.srcObject = stream\n      this.setState({ connecting: false, waiting: false })\n    })\n    peer.on('error', function(err) {\n      console.log(err)\n    })\n  }\n  call = otherId => {\n    this.videoCall.connect(otherId)\n  }\n  renderFull = () => {\n    if (this.state.full) {\n      return 'The room is full'\n    }\n  }\n  render() {\n    return (\n      <div className=\"video-wrapper\">\n        <div className=\"local-video-wrapper\">\n          <video\n            autoPlay\n            id=\"localVideo\"\n            muted\n            ref={video => (this.localVideo = video)}\n          />\n        </div>\n        <video\n          autoPlay\n          className={`${\n            this.state.connecting || this.state.waiting ? 'hide' : ''\n          }`}\n          id=\"remoteVideo\"\n          ref={video => (this.remoteVideo = video)}\n        />\n        <button className=\"share-screen-btn\" onClick={() => {\n          this.getDisplay()\n        }}><ShareScreenIcon/></button>\n        {this.state.connecting && (\n          <div className=\"status\">\n            <p>Establishing connection...</p>\n          </div>\n        )}\n        {this.state.waiting && (\n          <div className=\"status\">\n            <p>Waiting for someone...</p>\n          </div>\n        )}\n        {this.renderFull()}\n      </div>\n    )\n  }\n}\n\nexport default Video\n","import React, { useState } from 'react'\nimport shortId from 'shortid'\n\nconst goToRoom = (history, roomId) => {\n  history.push(`/${roomId}`)\n}\n\n\nexport function goToRoomInput({history}) {\n  let [roomId, setRoomId] = useState(shortId.generate());\n\n  return (<div className=\"enter-room-container\">\n    <form>\n          <input type=\"text\" value={roomId} placeholder=\"Room id\" onChange={(event) => {\n            setRoomId(event.target.value)\n          }}/>\n          <button onClick={() => {\n            goToRoom(history, roomId)\n          }}>Enter</button>\n          </form>\n        </div>)\n}","import React, { Component } from 'react';\nimport Video from './components/video'\nimport './App.css';\nimport './styles/video.css'\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { goToRoomInput } from './components/goToRoomInput';\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n       <React.Fragment>\n          <Route path=\"/\" exact component={goToRoomInput}/>\n          <Route path=\"/:roomId\" exact component={Video}/>\n        </React.Fragment>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}